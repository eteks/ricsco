# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
from django.conf import settings


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0006_require_contenttypes_0002'),
    ]

    operations = [
        migrations.CreateModel(
            name='Actor',
            fields=[
                ('user_ptr', models.OneToOneField(parent_link=True, auto_created=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('ssn', models.CharField(default=b'', help_text=b'Social security number', max_length=32, blank=True)),
                ('phone_number', models.CharField(default=b'', help_text=b'Actor main phone number (Format: + and country-code eg +4670323435)', max_length=32, blank=True)),
                ('alt_phone_number', models.CharField(default=b'', help_text=b'Actor alternative phone number', max_length=32, blank=True)),
                ('alt_email', models.EmailField(default=b'', help_text=b'Actor alternative email', max_length=254, blank=True)),
                ('skype', models.CharField(default=b'', help_text=b'Actor Skype ID', max_length=128, blank=True)),
                ('twitter', models.CharField(default=b'', help_text=b'Actor Twitter account', max_length=128, blank=True)),
                ('website', models.URLField(default=b'', help_text=b'Actor Website URL', blank=True)),
                ('blog', models.URLField(default=b'', help_text=b'Actor Blog URL', blank=True)),
                ('linkedin_name', models.CharField(default=b'', help_text=b'Actor LinkedIn account name', max_length=128, blank=True)),
                ('linkedin_ref', models.CharField(default=b'', help_text=b'Actor LinkedIn reference number', max_length=128, blank=True)),
                ('description', models.TextField(help_text=b'More information about Actor', blank=True)),
                ('language', models.CharField(default=b'', help_text=b'Stored as ISO codes (Sv, En, etc) in the DB', max_length=8, blank=True, choices=[(b'', b' '), (b'en', 'English'), (b'en-UK', 'English - United Kingdom'), (b'sv', 'Swedish'), (b'da', 'Danish'), (b'fi', 'Finish'), (b'fr', 'French'), (b'de', 'German'), (b'it', 'Italian'), (b'nn', 'Norwegian'), (b'pl', 'Polish'), (b'pt', 'Portuguese'), (b'ru', 'Russian'), (b'se', 'Spanish')])),
                ('timezone', models.CharField(default=b'UTC+01:00', help_text=b"UTC TimeZone <a href='http://en.wikipedia.org/wiki/Time_zone' target='_blank'>(http://en.wikipedia.org/wiki/Time_zone)</a>, eg UTC+01:00 for London", max_length=10, blank=True)),
                ('invite_code', models.CharField(default=b'', help_text=b'invite code', max_length=16, blank=True)),
                ('updated_on', models.DateTimeField(help_text=b'Auto generated by system', auto_now_add=True)),
                ('lockout_times', models.CharField(default=b'', help_text=b'lockout times', max_length=10, blank=True)),
                ('email_confirmation', models.BooleanField(default=False, help_text=b'To Check if User validated email')),
                ('type', models.CharField(default=b'', help_text=b'NOT IN USE', max_length=128, blank=True)),
                ('category', models.CharField(default=b'', help_text=b'NOT IN USE', max_length=128, blank=True)),
                ('partner_status', models.BooleanField(default=False, help_text=b'Describe whether the actor is partner of Fixido. If Actor is partner, True will be stored. False is the default value.')),
                ('partner_commission', models.FloatField(default=0.0, help_text=b'Commission percentage allocated to Fixido partner')),
                ('is_first', models.BooleanField(default=True, help_text=b'To Check if user logged in for the first time.')),
                ('signup_method', models.CharField(default=b'', help_text=b'Determine how the user is registered in Fixido', max_length=128, blank=True)),
                ('pkb_email', models.BooleanField(default=True, help_text=b'To check e-mail should be sent to partner', verbose_name=b'Send partner kickback email')),
                ('email_subscribed', models.BooleanField(default=True, help_text=b'Subscribe to notice e-mail')),
                ('sales_email', models.BooleanField(default=True, help_text=b'To check e-mail should be sent to seller')),
                ('is_sellerregistered', models.BooleanField(default=False, help_text=b'To check if user registered for seller account.')),
                ('Login_IPnumber', models.CharField(default=b'', help_text=b'stores user ip when log in.', max_length=100, blank=True)),
                ('Registration_IPnumber', models.CharField(default=b'', help_text=b'stores user ip when registration.', max_length=100, blank=True)),
                ('google_client_id', models.CharField(default=b'', help_text=b'Google client ID.', max_length=50, blank=True)),
                ('seller_commission', models.FloatField(default=-1.0, help_text=b'Seller commission percentage. Standard 50, 40, 30 or -1 for 0 commission')),
            ],
            options={
                'verbose_name': 'Actor',
                'verbose_name_plural': 'Actors',
            },
            bases=('auth.user',),
        ),
        migrations.CreateModel(
            name='ActorAddress',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('street', models.CharField(default=b'gfdgdf', help_text=b'Actor street full address information', max_length=512, blank=True)),
                ('postal_code', models.CharField(default=b'', help_text=b'Some countries has characters in postal code, So keep the postal code in CharField', max_length=32, blank=True)),
                ('city', models.CharField(default=b'', max_length=128, null=True, help_text=b'Actor city information')),
                ('state', models.CharField(default=b'', max_length=128, null=True, help_text=b'Actor state information')),
                ('region', models.CharField(default=b'', help_text=b'Use the overall term region, if both city and state is missing', max_length=128, blank=True)),
                ('country', models.CharField(default=b'', help_text=b"Stored as ISO codes (SE, US, etc) in the DB. Check <a href='http://en.wikipedia.org/wiki/ISO_3166-1' target='_blank'>ISO Countries</a> for ISO countries", max_length=3, choices=[(b'', b'Select'), (b'AF', 'Afghanistan'), (b'AX', 'Aland Islands Aland Islands'), (b'AL', 'Albania'), (b'DZ', 'Algeria'), (b'AS', 'American Samoa'), (b'AD', 'Andorra'), (b'AO', 'Angola'), (b'AI', 'Anguilla'), (b'AQ', 'Antarctica'), (b'AG', 'Antigua and Barbuda'), (b'AR', 'Argentina'), (b'AM', 'Armenia'), (b'AW', 'Aruba'), (b'AU', 'Australia'), (b'AT', 'Austria'), (b'AZ', 'Azerbaijan'), (b'BS', 'Bahamas'), (b'BH', 'Bahrain'), (b'BD', 'Bangladesh'), (b'BB', 'Barbados'), (b'BY', 'Belarus'), (b'BE', 'Belgium'), (b'BZ', 'Belize'), (b'BJ', 'Benin'), (b'BM', 'Bermuda'), (b'BT', 'Bhutan'), (b'BO', 'Bolivia, Plurinational State of'), (b'BQ', 'Bonaire, Sint Eustatius and Saba'), (b'BA', 'Bosnia and Herzegovina'), (b'BW', 'Botswana'), (b'BV', 'Bouvet Island'), (b'BR', 'Brazil'), (b'IO', 'British Indian Ocean Territory'), (b'BN', 'Brunei Darussalam'), (b'BG', 'Bulgaria'), (b'BF', 'Burkina Faso'), (b'BI', 'Burundi'), (b'KH', 'Cambodia'), (b'CM', 'Cameroon'), (b'CA', 'Canada'), (b'CV', 'Cape Verde'), (b'KY', 'Cayman Islands'), (b'CF', 'Central African Republic'), (b'TD', 'Chad'), (b'CL', 'Chile'), (b'CN', 'China'), (b'CX', 'Christmas Island'), (b'CC', 'Cocos (Keeling) Islands'), (b'CO', 'Colombia'), (b'KM', 'Comoros'), (b'CG', 'Congo'), (b'CD', 'Congo, the Democratic Republic of the'), (b'CK', 'Cook Islands'), (b'CR', 'Costa Rica'), (b'CI', 'Cote dIvoire Cote dIvoire'), (b'HR', 'Croatia'), (b'CU', 'Cuba'), (b'CW', 'Curacao Curacao'), (b'CY', 'Cyprus'), (b'CZ', 'Czech Republic'), (b'DK', 'Denmark'), (b'DJ', 'Djibouti'), (b'DM', 'Dominica'), (b'DO', 'Dominican Republic'), (b'EC', 'Ecuador'), (b'EG', 'Egypt'), (b'SV', 'El Salvador'), (b'GQ', 'Equatorial Guinea'), (b'ER', 'Eritrea'), (b'EE', 'Estonia'), (b'ET', 'Ethiopia'), (b'FK', 'Falkland Islands (Malvinas)'), (b'FO', 'Faroe Islands'), (b'FJ', 'Fiji'), (b'FI', 'Finland'), (b'FR', 'France'), (b'GF', 'French Guiana'), (b'PF', 'French Polynesia'), (b'TF', 'French Southern Territories'), (b'GA', 'Gabon'), (b'GM', 'Gambia'), (b'GE', 'Georgia'), (b'DE', 'Germany'), (b'GH', 'Ghana'), (b'GI', 'Gibraltar'), (b'GR', 'Greece'), (b'GL', 'Greenland'), (b'GD', 'Grenada'), (b'GP', 'Guadeloupe'), (b'GU', 'Guam'), (b'GT', 'Guatemala'), (b'GG', 'Guernsey'), (b'GN', 'Guinea'), (b'GW', 'Guinea-Bissau'), (b'GY', 'Guyana'), (b'HT', 'Haiti'), (b'HM', 'Heard Island and McDonald Islands'), (b'VA', 'Holy See (Vatican City State)'), (b'HN', 'Honduras'), (b'HK', 'Hong Kong'), (b'HU', 'Hungary'), (b'IS', 'Iceland'), (b'IN', 'India'), (b'ID', 'Indonesia'), (b'IR', 'Iran, Islamic Republic of'), (b'IQ', 'Iraq'), (b'IE', 'Ireland'), (b'IM', 'Isle of Man'), (b'IL', 'Israel'), (b'IT', 'Italy'), (b'JM', 'Jamaica'), (b'JP', 'Japan'), (b'JE', 'Jersey'), (b'JO', 'Jordan'), (b'KZ', 'Kazakhstan'), (b'KE', 'Kenya'), (b'KI', 'Kiribati'), (b'KP', 'Korea, Democratic People s Republic of'), (b'KR', 'Korea, Republic of'), (b'KW', 'Kuwait'), (b'KG', 'Kyrgyzstan'), (b'LA', 'Lao People s Democratic Republic'), (b'LV', 'Latvia'), (b'LB', 'Lebanon'), (b'LS', 'Lesotho'), (b'LR', 'Liberia'), (b'LY', 'Libya'), (b'LI', 'Liechtenstein'), (b'LT', 'Lithuania'), (b'LU', 'Luxembourg'), (b'MO', 'Macao'), (b'MK', 'Macedonia, The Former Yugoslav Republic of'), (b'MG', 'Madagascar'), (b'MW', 'Malawi'), (b'MY', 'Malaysia'), (b'MV', 'Maldives'), (b'ML', 'Mali'), (b'MT', 'Malta'), (b'MH', 'Marshall Islands'), (b'MQ', 'Martinique'), (b'MR', 'Mauritania'), (b'MU', 'Mauritius'), (b'YT', 'Mayotte'), (b'MX', 'Mexico'), (b'FM', 'Micronesia, Federated States of'), (b'MD', 'Moldova, Republic of'), (b'MC', 'Monaco'), (b'MN', 'Mongolia'), (b'ME', 'Montenegro'), (b'MS', 'Montserrat'), (b'MA', 'Morocco'), (b'MZ', 'Mozambique'), (b'MM', 'Myanmar'), (b'NA', 'Namibia'), (b'NR', 'Nauru'), (b'NP', 'Nepal'), (b'NL', 'Netherlands'), (b'NC', 'New Caledonia'), (b'NZ', 'New Zealand'), (b'NI', 'Nicaragua'), (b'NE', 'Niger'), (b'NG', 'Nigeria'), (b'NU', 'Niue'), (b'NF', 'Norfolk Island'), (b'MP', 'Northern Mariana Islands'), (b'NO', 'Norway'), (b'OM', 'Oman'), (b'PK', 'Pakistan'), (b'PW', 'Palau'), (b'PS', 'Palestinian Territory, Occupied'), (b'PA', 'Panama'), (b'PG', 'Papua New Guinea'), (b'PY', 'Paraguay'), (b'PE', 'Peru'), (b'PH', 'Philippines'), (b'PN', 'Pitcairn'), (b'PL', 'Poland'), (b'PT', 'Portugal'), (b'PR', 'Puerto Rico'), (b'QA', 'Qatar'), (b'RE', 'Reunion !Reunion'), (b'RO', 'Romania'), (b'RU', 'Russian Federation'), (b'RW', 'Rwanda'), (b'BL', 'Saint Barthelemy !Saint Barthelemy'), (b'SH', 'Saint Helena, Ascension and Tristan da Cunha'), (b'KN', 'Saint Kitts and Nevis'), (b'LC', 'Saint Lucia'), (b'MF', 'Saint Martin (French part)'), (b'PM', 'Saint Pierre and Miquelon'), (b'VC', 'Saint Vincent and the Grenadines'), (b'WS', 'Samoa'), (b'SM', 'San Marino'), (b'ST', 'Sao Tome and Principe'), (b'SA', 'Saudi Arabia'), (b'SN', 'Senegal'), (b'RS', 'Serbia'), (b'SC', 'Seychelles'), (b'SL', 'Sierra Leone'), (b'SG', 'Singapore'), (b'SX', 'Sint Maarten (Dutch part)'), (b'SK', 'Slovakia'), (b'SI', 'Slovenia'), (b'SB', 'Solomon Islands'), (b'SO', 'Somalia'), (b'ZA', 'South Africa'), (b'GS', 'South Georgia and the South Sandwich Islands'), (b'SS', 'South Sudan'), (b'ES', 'Spain'), (b'LK', 'Sri Lanka'), (b'SD', 'Sudan'), (b'SR', 'Suriname'), (b'SJ', 'Svalbard and Jan Mayen'), (b'SZ', 'Swaziland'), (b'SE', 'Sweden'), (b'CH', 'Switzerland'), (b'SY', 'Syrian Arab Republic'), (b'TW', 'Taiwan, Province of China'), (b'TJ', 'Tajikistan'), (b'TZ', 'Tanzania, United Republic of'), (b'TH', 'Thailand'), (b'TL', 'Timor-Leste'), (b'TG', 'Togo'), (b'TK', 'Tokelau'), (b'TO', 'Tonga'), (b'TT', 'Trinidad and Tobago'), (b'TN', 'Tunisia'), (b'TR', 'Turkey'), (b'TM', 'Turkmenistan'), (b'TC', 'Turks and Caicos Islands'), (b'TV', 'Tuvalu'), (b'UG', 'Uganda'), (b'UA', 'Ukraine'), (b'AE', 'United Arab Emirates'), (b'GB', 'United Kingdom'), (b'US', 'United States'), (b'UM', 'United States Minor Outlying Islands'), (b'UY', 'Uruguay'), (b'UZ', 'Uzbekistan'), (b'VU', 'Vanuatu'), (b'VE', 'Venezuela, Bolivarian Republic of'), (b'VN', 'Viet Nam'), (b'VG', 'Virgin Islands, British'), (b'VI', 'Virgin Islands, U.S.'), (b'WF', 'Wallis and Futuna'), (b'EH', 'Western Sahara'), (b'YE', 'Yemen'), (b'ZM', 'Zambia'), (b'ZW', 'Zimbabwe')])),
                ('modified_on', models.DateTimeField(help_text=b'Auto generated by system', auto_now_add=True)),
                ('created_on', models.DateTimeField(help_text=b'Auto generated by system', auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Actor address',
                'verbose_name_plural': 'Actor addresses',
            },
        ),
        migrations.CreateModel(
            name='ActorRating',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=128)),
                ('rating', models.FloatField(default=0.0)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ActorReview',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('comments', models.CharField(max_length=512, blank=True)),
                ('rating', models.PositiveSmallIntegerField(default=1)),
                ('actor', models.ForeignKey(to='actors.Actor', null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CompanyAbstract',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(default=b'', help_text=b'Company name', max_length=256, blank=True)),
                ('description', models.TextField(default=b'', help_text=b'Company description', blank=True)),
                ('cin', models.CharField(default=b'', help_text=b'Corporate identity number/Registration number', max_length=32, blank=True)),
                ('phone_number', models.CharField(default=b'', help_text=b'Company main phone number (Format: + and country-code eg +4670323435)', max_length=32, blank=True)),
                ('alt_phone_number', models.CharField(default=b'', help_text=b'Company alternative phone number (Format: + and country-code eg +4670323435)', max_length=32, blank=True)),
                ('email', models.EmailField(default=b'', help_text=b'Company contact email', max_length=75, blank=True)),
                ('website', models.URLField(default=b'', help_text=b'Company website', blank=True)),
                ('logo', models.FileField(help_text=b'Company logo uploaded to logotype directory', null=True, upload_to=b'logo', blank=True)),
                ('type', models.CharField(default=b'', help_text=b'NOT IN USE', max_length=128, blank=True)),
                ('category', models.CharField(default=b'', help_text=b'NOT IN USE', max_length=128, blank=True)),
                ('approved', models.BooleanField(default=False, help_text=b'Admin have to approve the company information to let others to add same company. NOT IN USE TODAY')),
                ('created_on', models.DateTimeField(help_text=b'Auto generated by system', auto_now_add=True)),
                ('modified_on', models.DateTimeField(help_text=b'Auto generated by system', auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='CompanyAddress',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('street', models.CharField(default=b'gfdgdf', help_text=b'Actor street full address information', max_length=512, blank=True)),
                ('postal_code', models.CharField(default=b'', help_text=b'Some countries has characters in postal code, So keep the postal code in CharField', max_length=32, blank=True)),
                ('city', models.CharField(default=b'', max_length=128, null=True, help_text=b'Actor city information')),
                ('state', models.CharField(default=b'', max_length=128, null=True, help_text=b'Actor state information')),
                ('region', models.CharField(default=b'', help_text=b'Use the overall term region, if both city and state is missing', max_length=128, blank=True)),
                ('country', models.CharField(default=b'', help_text=b"Stored as ISO codes (SE, US, etc) in the DB. Check <a href='http://en.wikipedia.org/wiki/ISO_3166-1' target='_blank'>ISO Countries</a> for ISO countries", max_length=3, choices=[(b'', b'Select'), (b'AF', 'Afghanistan'), (b'AX', 'Aland Islands Aland Islands'), (b'AL', 'Albania'), (b'DZ', 'Algeria'), (b'AS', 'American Samoa'), (b'AD', 'Andorra'), (b'AO', 'Angola'), (b'AI', 'Anguilla'), (b'AQ', 'Antarctica'), (b'AG', 'Antigua and Barbuda'), (b'AR', 'Argentina'), (b'AM', 'Armenia'), (b'AW', 'Aruba'), (b'AU', 'Australia'), (b'AT', 'Austria'), (b'AZ', 'Azerbaijan'), (b'BS', 'Bahamas'), (b'BH', 'Bahrain'), (b'BD', 'Bangladesh'), (b'BB', 'Barbados'), (b'BY', 'Belarus'), (b'BE', 'Belgium'), (b'BZ', 'Belize'), (b'BJ', 'Benin'), (b'BM', 'Bermuda'), (b'BT', 'Bhutan'), (b'BO', 'Bolivia, Plurinational State of'), (b'BQ', 'Bonaire, Sint Eustatius and Saba'), (b'BA', 'Bosnia and Herzegovina'), (b'BW', 'Botswana'), (b'BV', 'Bouvet Island'), (b'BR', 'Brazil'), (b'IO', 'British Indian Ocean Territory'), (b'BN', 'Brunei Darussalam'), (b'BG', 'Bulgaria'), (b'BF', 'Burkina Faso'), (b'BI', 'Burundi'), (b'KH', 'Cambodia'), (b'CM', 'Cameroon'), (b'CA', 'Canada'), (b'CV', 'Cape Verde'), (b'KY', 'Cayman Islands'), (b'CF', 'Central African Republic'), (b'TD', 'Chad'), (b'CL', 'Chile'), (b'CN', 'China'), (b'CX', 'Christmas Island'), (b'CC', 'Cocos (Keeling) Islands'), (b'CO', 'Colombia'), (b'KM', 'Comoros'), (b'CG', 'Congo'), (b'CD', 'Congo, the Democratic Republic of the'), (b'CK', 'Cook Islands'), (b'CR', 'Costa Rica'), (b'CI', 'Cote dIvoire Cote dIvoire'), (b'HR', 'Croatia'), (b'CU', 'Cuba'), (b'CW', 'Curacao Curacao'), (b'CY', 'Cyprus'), (b'CZ', 'Czech Republic'), (b'DK', 'Denmark'), (b'DJ', 'Djibouti'), (b'DM', 'Dominica'), (b'DO', 'Dominican Republic'), (b'EC', 'Ecuador'), (b'EG', 'Egypt'), (b'SV', 'El Salvador'), (b'GQ', 'Equatorial Guinea'), (b'ER', 'Eritrea'), (b'EE', 'Estonia'), (b'ET', 'Ethiopia'), (b'FK', 'Falkland Islands (Malvinas)'), (b'FO', 'Faroe Islands'), (b'FJ', 'Fiji'), (b'FI', 'Finland'), (b'FR', 'France'), (b'GF', 'French Guiana'), (b'PF', 'French Polynesia'), (b'TF', 'French Southern Territories'), (b'GA', 'Gabon'), (b'GM', 'Gambia'), (b'GE', 'Georgia'), (b'DE', 'Germany'), (b'GH', 'Ghana'), (b'GI', 'Gibraltar'), (b'GR', 'Greece'), (b'GL', 'Greenland'), (b'GD', 'Grenada'), (b'GP', 'Guadeloupe'), (b'GU', 'Guam'), (b'GT', 'Guatemala'), (b'GG', 'Guernsey'), (b'GN', 'Guinea'), (b'GW', 'Guinea-Bissau'), (b'GY', 'Guyana'), (b'HT', 'Haiti'), (b'HM', 'Heard Island and McDonald Islands'), (b'VA', 'Holy See (Vatican City State)'), (b'HN', 'Honduras'), (b'HK', 'Hong Kong'), (b'HU', 'Hungary'), (b'IS', 'Iceland'), (b'IN', 'India'), (b'ID', 'Indonesia'), (b'IR', 'Iran, Islamic Republic of'), (b'IQ', 'Iraq'), (b'IE', 'Ireland'), (b'IM', 'Isle of Man'), (b'IL', 'Israel'), (b'IT', 'Italy'), (b'JM', 'Jamaica'), (b'JP', 'Japan'), (b'JE', 'Jersey'), (b'JO', 'Jordan'), (b'KZ', 'Kazakhstan'), (b'KE', 'Kenya'), (b'KI', 'Kiribati'), (b'KP', 'Korea, Democratic People s Republic of'), (b'KR', 'Korea, Republic of'), (b'KW', 'Kuwait'), (b'KG', 'Kyrgyzstan'), (b'LA', 'Lao People s Democratic Republic'), (b'LV', 'Latvia'), (b'LB', 'Lebanon'), (b'LS', 'Lesotho'), (b'LR', 'Liberia'), (b'LY', 'Libya'), (b'LI', 'Liechtenstein'), (b'LT', 'Lithuania'), (b'LU', 'Luxembourg'), (b'MO', 'Macao'), (b'MK', 'Macedonia, The Former Yugoslav Republic of'), (b'MG', 'Madagascar'), (b'MW', 'Malawi'), (b'MY', 'Malaysia'), (b'MV', 'Maldives'), (b'ML', 'Mali'), (b'MT', 'Malta'), (b'MH', 'Marshall Islands'), (b'MQ', 'Martinique'), (b'MR', 'Mauritania'), (b'MU', 'Mauritius'), (b'YT', 'Mayotte'), (b'MX', 'Mexico'), (b'FM', 'Micronesia, Federated States of'), (b'MD', 'Moldova, Republic of'), (b'MC', 'Monaco'), (b'MN', 'Mongolia'), (b'ME', 'Montenegro'), (b'MS', 'Montserrat'), (b'MA', 'Morocco'), (b'MZ', 'Mozambique'), (b'MM', 'Myanmar'), (b'NA', 'Namibia'), (b'NR', 'Nauru'), (b'NP', 'Nepal'), (b'NL', 'Netherlands'), (b'NC', 'New Caledonia'), (b'NZ', 'New Zealand'), (b'NI', 'Nicaragua'), (b'NE', 'Niger'), (b'NG', 'Nigeria'), (b'NU', 'Niue'), (b'NF', 'Norfolk Island'), (b'MP', 'Northern Mariana Islands'), (b'NO', 'Norway'), (b'OM', 'Oman'), (b'PK', 'Pakistan'), (b'PW', 'Palau'), (b'PS', 'Palestinian Territory, Occupied'), (b'PA', 'Panama'), (b'PG', 'Papua New Guinea'), (b'PY', 'Paraguay'), (b'PE', 'Peru'), (b'PH', 'Philippines'), (b'PN', 'Pitcairn'), (b'PL', 'Poland'), (b'PT', 'Portugal'), (b'PR', 'Puerto Rico'), (b'QA', 'Qatar'), (b'RE', 'Reunion !Reunion'), (b'RO', 'Romania'), (b'RU', 'Russian Federation'), (b'RW', 'Rwanda'), (b'BL', 'Saint Barthelemy !Saint Barthelemy'), (b'SH', 'Saint Helena, Ascension and Tristan da Cunha'), (b'KN', 'Saint Kitts and Nevis'), (b'LC', 'Saint Lucia'), (b'MF', 'Saint Martin (French part)'), (b'PM', 'Saint Pierre and Miquelon'), (b'VC', 'Saint Vincent and the Grenadines'), (b'WS', 'Samoa'), (b'SM', 'San Marino'), (b'ST', 'Sao Tome and Principe'), (b'SA', 'Saudi Arabia'), (b'SN', 'Senegal'), (b'RS', 'Serbia'), (b'SC', 'Seychelles'), (b'SL', 'Sierra Leone'), (b'SG', 'Singapore'), (b'SX', 'Sint Maarten (Dutch part)'), (b'SK', 'Slovakia'), (b'SI', 'Slovenia'), (b'SB', 'Solomon Islands'), (b'SO', 'Somalia'), (b'ZA', 'South Africa'), (b'GS', 'South Georgia and the South Sandwich Islands'), (b'SS', 'South Sudan'), (b'ES', 'Spain'), (b'LK', 'Sri Lanka'), (b'SD', 'Sudan'), (b'SR', 'Suriname'), (b'SJ', 'Svalbard and Jan Mayen'), (b'SZ', 'Swaziland'), (b'SE', 'Sweden'), (b'CH', 'Switzerland'), (b'SY', 'Syrian Arab Republic'), (b'TW', 'Taiwan, Province of China'), (b'TJ', 'Tajikistan'), (b'TZ', 'Tanzania, United Republic of'), (b'TH', 'Thailand'), (b'TL', 'Timor-Leste'), (b'TG', 'Togo'), (b'TK', 'Tokelau'), (b'TO', 'Tonga'), (b'TT', 'Trinidad and Tobago'), (b'TN', 'Tunisia'), (b'TR', 'Turkey'), (b'TM', 'Turkmenistan'), (b'TC', 'Turks and Caicos Islands'), (b'TV', 'Tuvalu'), (b'UG', 'Uganda'), (b'UA', 'Ukraine'), (b'AE', 'United Arab Emirates'), (b'GB', 'United Kingdom'), (b'US', 'United States'), (b'UM', 'United States Minor Outlying Islands'), (b'UY', 'Uruguay'), (b'UZ', 'Uzbekistan'), (b'VU', 'Vanuatu'), (b'VE', 'Venezuela, Bolivarian Republic of'), (b'VN', 'Viet Nam'), (b'VG', 'Virgin Islands, British'), (b'VI', 'Virgin Islands, U.S.'), (b'WF', 'Wallis and Futuna'), (b'EH', 'Western Sahara'), (b'YE', 'Yemen'), (b'ZM', 'Zambia'), (b'ZW', 'Zimbabwe')])),
                ('modified_on', models.DateTimeField(help_text=b'Auto generated by system', auto_now_add=True)),
                ('created_on', models.DateTimeField(help_text=b'Auto generated by system', auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Company address',
                'verbose_name_plural': 'Company addresses',
            },
        ),
        migrations.CreateModel(
            name='CompanyRanking',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('rank', models.FloatField(default=0.0)),
                ('ranking', models.ForeignKey(blank=True, to='actors.CompanyRanking', help_text=b'Ranking for company', null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CompanyRating',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=128)),
                ('rating', models.FloatField(default=0.0)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CompanyReview',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('comments', models.CharField(max_length=512, blank=True)),
                ('rating', models.PositiveSmallIntegerField(default=1)),
                ('actor', models.ForeignKey(to='actors.Actor', null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ActorCompany',
            fields=[
                ('companyabstract_ptr', models.OneToOneField(parent_link=True, auto_created=True, primary_key=True, serialize=False, to='actors.CompanyAbstract')),
            ],
            options={
                'verbose_name': 'Actor company',
                'verbose_name_plural': 'Actor companies',
            },
            bases=('actors.companyabstract',),
        ),
        migrations.AddField(
            model_name='companyrating',
            name='reviews',
            field=models.ForeignKey(blank=True, to='actors.CompanyReview', help_text=b'Review for company', null=True),
        ),
        migrations.AddField(
            model_name='companyabstract',
            name='address',
            field=models.OneToOneField(null=True, blank=True, to='actors.CompanyAddress', help_text=b'Company street full address information'),
        ),
        migrations.AddField(
            model_name='companyabstract',
            name='ranking',
            field=models.ForeignKey(blank=True, to='actors.CompanyRanking', help_text=b'Ranking to be generated by system automatically', null=True),
        ),
        migrations.AddField(
            model_name='companyabstract',
            name='rating',
            field=models.ForeignKey(blank=True, to='actors.CompanyRating', help_text=b'Rating to be provided by Actor towards company', null=True),
        ),
        migrations.AddField(
            model_name='actorrating',
            name='reviews',
            field=models.ForeignKey(blank=True, to='actors.ActorReview', help_text=b'Ranking for the Actor', null=True),
        ),
        migrations.AddField(
            model_name='actor',
            name='address',
            field=models.OneToOneField(null=True, blank=True, to='actors.ActorAddress', help_text=b'Actor full address information'),
        ),
        migrations.AddField(
            model_name='actor',
            name='rating',
            field=models.ForeignKey(blank=True, to='actors.ActorRating', help_text=b'Rating done by User', null=True),
        ),
        migrations.AddField(
            model_name='actor',
            name='company',
            field=models.ForeignKey(blank=True, to='actors.ActorCompany', null=True),
        ),
    ]
