# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
import leads.models


class Migration(migrations.Migration):

    dependencies = [
        ('actors', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Consumer',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('first_name', models.CharField(default=b'', help_text=b'First name of consumer.', max_length=256, blank=True)),
                ('last_name', models.CharField(default=b'', help_text=b'Last name of consumer.', max_length=256, blank=True)),
                ('title', models.CharField(default=b'', help_text=b'Title of consumer.', max_length=32, blank=True)),
                ('gender', models.CharField(default=b'unknown', help_text=b'Gender of consumer.', max_length=10, blank=True, choices=[(b'unknown', b'Unknown'), (b'male', b'Male'), (b'female', b'Female')])),
                ('email', models.EmailField(default=b'', help_text=b'Email of consumer.', max_length=254, blank=True)),
                ('phone_number', models.CharField(default=b'', help_text=b'Contact number of consumer.', max_length=16, blank=True)),
                ('alt_phone_number', models.CharField(default=b'', help_text=b'Alternate contact number of consumer.', max_length=16, blank=True)),
                ('skype', models.CharField(default=b'', help_text=b'Skype ID of consumer.', max_length=128, blank=True)),
                ('best_call_time', models.CharField(default=b'', help_text=b'Best time to contact (call) the consumer.', max_length=16, blank=True)),
                ('preferred_method', models.CharField(default=b'', help_text=b'Best method to contact the consumer (such as email/phone/visit).', max_length=16, blank=True)),
                ('position', models.CharField(default=b'', help_text=b'Working position at current company.', max_length=32, blank=True)),
                ('ssn', models.CharField(default=b'', help_text=b'Social security number.', max_length=32, blank=True)),
                ('date_of_birth', models.DateField(help_text=b'Date of birth.', null=True, blank=True)),
                ('language', models.CharField(default=b'', help_text=b'Stored as ISO codes (Sv, En, etc) in the DB.', max_length=8, blank=True, choices=[(b'', b' '), (b'en', 'English'), (b'en-UK', 'English - United Kingdom'), (b'sv', 'Swedish'), (b'da', 'Danish'), (b'fi', 'Finish'), (b'fr', 'French'), (b'de', 'German'), (b'it', 'Italian'), (b'nn', 'Norwegian'), (b'pl', 'Polish'), (b'pt', 'Portuguese'), (b'ru', 'Russian'), (b'se', 'Spanish')])),
                ('timezone', models.CharField(default=b'UTC+01:00', help_text=b'PLEASE CHANGE THIS TO SUPPORT DJANGO STANDARD TIMEZONE. UTC TimeZone (http://en.wikipedia.org/wiki/Time_zone), eg UTC+01:00 for London.', max_length=10, blank=True)),
                ('updated_on', models.DateTimeField(help_text=b'Auto generated by system.', auto_now_add=True)),
                ('info', models.TextField(default=b'', help_text=b'Other consumer info', blank=True)),
                ('reference', models.CharField(default=b'', help_text=b'Sellers reference number/id/site. Optional.', max_length=32, blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='ConsumerAddress',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('street', models.CharField(default=b'gfdgdf', help_text=b'Actor street full address information', max_length=512, blank=True)),
                ('postal_code', models.CharField(default=b'', help_text=b'Some countries has characters in postal code, So keep the postal code in CharField', max_length=32, blank=True)),
                ('city', models.CharField(default=b'', max_length=128, null=True, help_text=b'Actor city information')),
                ('state', models.CharField(default=b'', max_length=128, null=True, help_text=b'Actor state information')),
                ('region', models.CharField(default=b'', help_text=b'Use the overall term region, if both city and state is missing', max_length=128, blank=True)),
                ('country', models.CharField(default=b'', help_text=b"Stored as ISO codes (SE, US, etc) in the DB. Check <a href='http://en.wikipedia.org/wiki/ISO_3166-1' target='_blank'>ISO Countries</a> for ISO countries", max_length=3, choices=[(b'', b'Select'), (b'AF', 'Afghanistan'), (b'AX', 'Aland Islands Aland Islands'), (b'AL', 'Albania'), (b'DZ', 'Algeria'), (b'AS', 'American Samoa'), (b'AD', 'Andorra'), (b'AO', 'Angola'), (b'AI', 'Anguilla'), (b'AQ', 'Antarctica'), (b'AG', 'Antigua and Barbuda'), (b'AR', 'Argentina'), (b'AM', 'Armenia'), (b'AW', 'Aruba'), (b'AU', 'Australia'), (b'AT', 'Austria'), (b'AZ', 'Azerbaijan'), (b'BS', 'Bahamas'), (b'BH', 'Bahrain'), (b'BD', 'Bangladesh'), (b'BB', 'Barbados'), (b'BY', 'Belarus'), (b'BE', 'Belgium'), (b'BZ', 'Belize'), (b'BJ', 'Benin'), (b'BM', 'Bermuda'), (b'BT', 'Bhutan'), (b'BO', 'Bolivia, Plurinational State of'), (b'BQ', 'Bonaire, Sint Eustatius and Saba'), (b'BA', 'Bosnia and Herzegovina'), (b'BW', 'Botswana'), (b'BV', 'Bouvet Island'), (b'BR', 'Brazil'), (b'IO', 'British Indian Ocean Territory'), (b'BN', 'Brunei Darussalam'), (b'BG', 'Bulgaria'), (b'BF', 'Burkina Faso'), (b'BI', 'Burundi'), (b'KH', 'Cambodia'), (b'CM', 'Cameroon'), (b'CA', 'Canada'), (b'CV', 'Cape Verde'), (b'KY', 'Cayman Islands'), (b'CF', 'Central African Republic'), (b'TD', 'Chad'), (b'CL', 'Chile'), (b'CN', 'China'), (b'CX', 'Christmas Island'), (b'CC', 'Cocos (Keeling) Islands'), (b'CO', 'Colombia'), (b'KM', 'Comoros'), (b'CG', 'Congo'), (b'CD', 'Congo, the Democratic Republic of the'), (b'CK', 'Cook Islands'), (b'CR', 'Costa Rica'), (b'CI', 'Cote dIvoire Cote dIvoire'), (b'HR', 'Croatia'), (b'CU', 'Cuba'), (b'CW', 'Curacao Curacao'), (b'CY', 'Cyprus'), (b'CZ', 'Czech Republic'), (b'DK', 'Denmark'), (b'DJ', 'Djibouti'), (b'DM', 'Dominica'), (b'DO', 'Dominican Republic'), (b'EC', 'Ecuador'), (b'EG', 'Egypt'), (b'SV', 'El Salvador'), (b'GQ', 'Equatorial Guinea'), (b'ER', 'Eritrea'), (b'EE', 'Estonia'), (b'ET', 'Ethiopia'), (b'FK', 'Falkland Islands (Malvinas)'), (b'FO', 'Faroe Islands'), (b'FJ', 'Fiji'), (b'FI', 'Finland'), (b'FR', 'France'), (b'GF', 'French Guiana'), (b'PF', 'French Polynesia'), (b'TF', 'French Southern Territories'), (b'GA', 'Gabon'), (b'GM', 'Gambia'), (b'GE', 'Georgia'), (b'DE', 'Germany'), (b'GH', 'Ghana'), (b'GI', 'Gibraltar'), (b'GR', 'Greece'), (b'GL', 'Greenland'), (b'GD', 'Grenada'), (b'GP', 'Guadeloupe'), (b'GU', 'Guam'), (b'GT', 'Guatemala'), (b'GG', 'Guernsey'), (b'GN', 'Guinea'), (b'GW', 'Guinea-Bissau'), (b'GY', 'Guyana'), (b'HT', 'Haiti'), (b'HM', 'Heard Island and McDonald Islands'), (b'VA', 'Holy See (Vatican City State)'), (b'HN', 'Honduras'), (b'HK', 'Hong Kong'), (b'HU', 'Hungary'), (b'IS', 'Iceland'), (b'IN', 'India'), (b'ID', 'Indonesia'), (b'IR', 'Iran, Islamic Republic of'), (b'IQ', 'Iraq'), (b'IE', 'Ireland'), (b'IM', 'Isle of Man'), (b'IL', 'Israel'), (b'IT', 'Italy'), (b'JM', 'Jamaica'), (b'JP', 'Japan'), (b'JE', 'Jersey'), (b'JO', 'Jordan'), (b'KZ', 'Kazakhstan'), (b'KE', 'Kenya'), (b'KI', 'Kiribati'), (b'KP', 'Korea, Democratic People s Republic of'), (b'KR', 'Korea, Republic of'), (b'KW', 'Kuwait'), (b'KG', 'Kyrgyzstan'), (b'LA', 'Lao People s Democratic Republic'), (b'LV', 'Latvia'), (b'LB', 'Lebanon'), (b'LS', 'Lesotho'), (b'LR', 'Liberia'), (b'LY', 'Libya'), (b'LI', 'Liechtenstein'), (b'LT', 'Lithuania'), (b'LU', 'Luxembourg'), (b'MO', 'Macao'), (b'MK', 'Macedonia, The Former Yugoslav Republic of'), (b'MG', 'Madagascar'), (b'MW', 'Malawi'), (b'MY', 'Malaysia'), (b'MV', 'Maldives'), (b'ML', 'Mali'), (b'MT', 'Malta'), (b'MH', 'Marshall Islands'), (b'MQ', 'Martinique'), (b'MR', 'Mauritania'), (b'MU', 'Mauritius'), (b'YT', 'Mayotte'), (b'MX', 'Mexico'), (b'FM', 'Micronesia, Federated States of'), (b'MD', 'Moldova, Republic of'), (b'MC', 'Monaco'), (b'MN', 'Mongolia'), (b'ME', 'Montenegro'), (b'MS', 'Montserrat'), (b'MA', 'Morocco'), (b'MZ', 'Mozambique'), (b'MM', 'Myanmar'), (b'NA', 'Namibia'), (b'NR', 'Nauru'), (b'NP', 'Nepal'), (b'NL', 'Netherlands'), (b'NC', 'New Caledonia'), (b'NZ', 'New Zealand'), (b'NI', 'Nicaragua'), (b'NE', 'Niger'), (b'NG', 'Nigeria'), (b'NU', 'Niue'), (b'NF', 'Norfolk Island'), (b'MP', 'Northern Mariana Islands'), (b'NO', 'Norway'), (b'OM', 'Oman'), (b'PK', 'Pakistan'), (b'PW', 'Palau'), (b'PS', 'Palestinian Territory, Occupied'), (b'PA', 'Panama'), (b'PG', 'Papua New Guinea'), (b'PY', 'Paraguay'), (b'PE', 'Peru'), (b'PH', 'Philippines'), (b'PN', 'Pitcairn'), (b'PL', 'Poland'), (b'PT', 'Portugal'), (b'PR', 'Puerto Rico'), (b'QA', 'Qatar'), (b'RE', 'Reunion !Reunion'), (b'RO', 'Romania'), (b'RU', 'Russian Federation'), (b'RW', 'Rwanda'), (b'BL', 'Saint Barthelemy !Saint Barthelemy'), (b'SH', 'Saint Helena, Ascension and Tristan da Cunha'), (b'KN', 'Saint Kitts and Nevis'), (b'LC', 'Saint Lucia'), (b'MF', 'Saint Martin (French part)'), (b'PM', 'Saint Pierre and Miquelon'), (b'VC', 'Saint Vincent and the Grenadines'), (b'WS', 'Samoa'), (b'SM', 'San Marino'), (b'ST', 'Sao Tome and Principe'), (b'SA', 'Saudi Arabia'), (b'SN', 'Senegal'), (b'RS', 'Serbia'), (b'SC', 'Seychelles'), (b'SL', 'Sierra Leone'), (b'SG', 'Singapore'), (b'SX', 'Sint Maarten (Dutch part)'), (b'SK', 'Slovakia'), (b'SI', 'Slovenia'), (b'SB', 'Solomon Islands'), (b'SO', 'Somalia'), (b'ZA', 'South Africa'), (b'GS', 'South Georgia and the South Sandwich Islands'), (b'SS', 'South Sudan'), (b'ES', 'Spain'), (b'LK', 'Sri Lanka'), (b'SD', 'Sudan'), (b'SR', 'Suriname'), (b'SJ', 'Svalbard and Jan Mayen'), (b'SZ', 'Swaziland'), (b'SE', 'Sweden'), (b'CH', 'Switzerland'), (b'SY', 'Syrian Arab Republic'), (b'TW', 'Taiwan, Province of China'), (b'TJ', 'Tajikistan'), (b'TZ', 'Tanzania, United Republic of'), (b'TH', 'Thailand'), (b'TL', 'Timor-Leste'), (b'TG', 'Togo'), (b'TK', 'Tokelau'), (b'TO', 'Tonga'), (b'TT', 'Trinidad and Tobago'), (b'TN', 'Tunisia'), (b'TR', 'Turkey'), (b'TM', 'Turkmenistan'), (b'TC', 'Turks and Caicos Islands'), (b'TV', 'Tuvalu'), (b'UG', 'Uganda'), (b'UA', 'Ukraine'), (b'AE', 'United Arab Emirates'), (b'GB', 'United Kingdom'), (b'US', 'United States'), (b'UM', 'United States Minor Outlying Islands'), (b'UY', 'Uruguay'), (b'UZ', 'Uzbekistan'), (b'VU', 'Vanuatu'), (b'VE', 'Venezuela, Bolivarian Republic of'), (b'VN', 'Viet Nam'), (b'VG', 'Virgin Islands, British'), (b'VI', 'Virgin Islands, U.S.'), (b'WF', 'Wallis and Futuna'), (b'EH', 'Western Sahara'), (b'YE', 'Yemen'), (b'ZM', 'Zambia'), (b'ZW', 'Zimbabwe')])),
                ('modified_on', models.DateTimeField(help_text=b'Auto generated by system', auto_now_add=True)),
                ('created_on', models.DateTimeField(help_text=b'Auto generated by system', auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Consumer addresses',
            },
        ),
        migrations.CreateModel(
            name='ConsumerCompany',
            fields=[
                ('companyabstract_ptr', models.OneToOneField(parent_link=True, auto_created=True, primary_key=True, serialize=False, to='actors.CompanyAbstract')),
                ('industry', models.CharField(default=b'', help_text=b'Industry type', max_length=128, blank=True)),
                ('no_of_employees', models.CharField(default=b'', help_text=b'Total number of employees', max_length=50, blank=True)),
                ('turn_over', models.IntegerField(default=0, help_text=b'Total turn over', blank=True)),
                ('profit', models.IntegerField(default=0, help_text=b'Total profit', blank=True)),
                ('company_financial_data_currency', models.CharField(default=b'', help_text=b'Company financial data currency. Stored as ISO codes (SEK, EUR, etc) in the DB', max_length=8, blank=True)),
                ('visiting_address', models.OneToOneField(null=True, blank=True, to='leads.ConsumerAddress', help_text=b'Visiting address (if not same as main company address)')),
            ],
            options={
                'verbose_name_plural': 'Consumer companies',
            },
            bases=('actors.companyabstract',),
        ),
        migrations.CreateModel(
            name='KeywordStatistics',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=128, editable=False)),
                ('lead_count', models.PositiveIntegerField(default=0, help_text=b'Tells how many times the request have been shared', editable=False, blank=True)),
                ('created', models.DateTimeField(help_text=b'Auto generated by system.', auto_now_add=True)),
                ('lead_language', models.CharField(help_text=b'Identifies the language of lead.', max_length=8, editable=False)),
            ],
            options={
                'verbose_name_plural': 'Keyword Statistics',
            },
        ),
        migrations.CreateModel(
            name='Lead',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('title', models.CharField(default=b'', help_text=b'Short title of the lead', max_length=256, verbose_name='title', blank=True)),
                ('description', models.TextField(default=b'', help_text=b'Detailed description of the lead', blank=True)),
                ('read_more_link', models.URLField(default=b'', help_text=b'A read more reference link (URL)', blank=True)),
                ('image', models.ImageField(null=True, upload_to=leads.models.lead_image_filepath, blank=True)),
                ('price', models.DecimalField(default=0.0, help_text=b'Current price of lead', verbose_name=b'Price', max_digits=10, decimal_places=2)),
                ('original_price', models.DecimalField(default=0.0, help_text=b'Price of lead when added by seller', verbose_name=b'Original price', max_digits=10, decimal_places=2)),
                ('oldprice', models.DecimalField(default=0.0, help_text=b'Price of lead before changed by admin', verbose_name=b'Old price', max_digits=10, decimal_places=2)),
                ('price_currency', models.CharField(default=b'', help_text=b'Lead currency. Stored as ISO codes (SEK, EUR, etc) in the DB', max_length=8, blank=True)),
                ('sale', models.PositiveSmallIntegerField(default=0, help_text=b'Tells how many leads are originally available for sale')),
                ('sold', models.PositiveSmallIntegerField(default=0, help_text=b'Tells how many leads have been sold', blank=True)),
                ('pre_sold', models.PositiveSmallIntegerField(default=0, help_text=b'Tells how many leads have been sold previously by the seller outside Fixido', blank=True)),
                ('reference', models.CharField(default=b'', help_text=b'Sellers reference number/id/site. Optional.', max_length=32, blank=True)),
                ('deal_starts', models.DateTimeField(help_text=b'Date from when the consumer wants to buy product or service', null=True, blank=True)),
                ('deal_ends', models.DateTimeField(help_text=b'Date until when the consumer wants to buy product or service', null=True, blank=True)),
                ('budget', models.DecimalField(default=0.0, help_text=b'Estimated total value of budget for the product/service', max_digits=10, decimal_places=2, blank=True)),
                ('budget_currency', models.CharField(default=b'', help_text=b'Budget currency. Stored as ISO codes (SEK, EUR, etc) in the DB', max_length=8, blank=True)),
                ('active', models.BooleanField(default=True, help_text=b'Lead status, handle by system')),
                ('status', models.CharField(default=b'active', help_text=b'Lead status, handle by seller', max_length=10, choices=[(b'active', 'Active'), (b'inactive', 'Inactive'), (b'test', 'Test')])),
                ('language', models.CharField(default=b'', help_text=b'Stored as ISO codes (Sv, En, etc) in the DB', max_length=8, blank=True, choices=[(b'', b' '), (b'en', 'English'), (b'en-UK', 'English - United Kingdom'), (b'sv', 'Swedish'), (b'da', 'Danish'), (b'fi', 'Finish'), (b'fr', 'French'), (b'de', 'German'), (b'it', 'Italian'), (b'nn', 'Norwegian'), (b'pl', 'Polish'), (b'pt', 'Portuguese'), (b'ru', 'Russian'), (b'se', 'Spanish')])),
                ('timezone', models.CharField(default=b'UTC+01:00', help_text=b'UTC TimeZone (http://en.wikipedia.org/wiki/Time_zone), eg UTC+01:00 for London', max_length=10, blank=True)),
                ('generation_method', models.CharField(default=b'online', help_text=b'Specifies the method used to generate the lead', max_length=128, blank=True, choices=[(b'online', b'Online'), (b'phone', b'Phone')])),
                ('generation_source', models.CharField(default=b'', help_text=b' Tell us where the lead is generated', max_length=256, blank=True)),
                ('generation_date', models.DateTimeField(help_text=b'Date when the lead was generated in sellers system', null=True, blank=True)),
                ('ranking', models.FloatField(default=0.0, help_text=b'Ranking of leads', blank=True, choices=[(0.0, 0.0), (0.5, 0.5), (1.0, 1.0), (1.5, 1.5), (2.0, 2.0), (2.5, 2.5), (3.0, 3.0), (3.5, 3.5), (4.0, 4.0), (4.5, 4.5), (5.0, 5.0)])),
                ('created', models.DateTimeField(help_text=b'Auto generated by system.', auto_now_add=True)),
                ('modified', models.DateTimeField(help_text=b'Auto generated by system.', auto_now_add=True)),
                ('inactive_reason', models.CharField(default=b'', help_text=b'Reason to inactive this lead.', max_length=100, blank=True, choices=[(b'deal_done', 'Deal done'), (b'deal_end', 'Deal end'), (b'deal_withdrawn', 'Deal withdrawn'), (b'duplicate', 'Duplicate'), (b'moderate', 'Moderating'), (b'old_lead', 'Old lead'), (b'spam', 'Spam'), (b'user_deleted', 'User deleted')])),
                ('inactive_date', models.DateTimeField(help_text=b'Auto generated by system.', null=True, blank=True)),
                ('accept_campaign', models.BooleanField(default=True, help_text=b'Can we use the lead in campaigns?')),
                ('phone_verified', models.BooleanField(default=False, help_text=b'This lead is phone verified by Fixido.', verbose_name=b'PV')),
                ('phone_verified_date', models.DateField(help_text=b'Date of phone verification.', null=True, blank=True)),
                ('email_verified', models.BooleanField(default=False, help_text=b'This lead is email verified by Fixido.', verbose_name=b'EV')),
                ('email_verified_date', models.DateField(help_text=b'Date of email verification.', null=True, blank=True)),
                ('reinquire', models.BooleanField(default=False, verbose_name=b'RE')),
                ('base_price', models.DecimalField(default=0.0, max_digits=10, decimal_places=2)),
                ('base_currency', models.CharField(default=b'INR', max_length=6)),
            ],
        ),
        migrations.CreateModel(
            name='Leadamount',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('leadcount', models.BigIntegerField(default=0, help_text=b'Tells how many times the request have been shared', editable=False, blank=True)),
                ('created', models.DateTimeField(help_text=b'Auto generated by system.', auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='LeadAskQuestion',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('email', models.EmailField(default=b'', help_text=b'Email of user.', max_length=254, blank=True)),
                ('phone_number', models.CharField(default=b'', max_length=16, null=True, help_text=b'Contact number of user.', blank=True)),
                ('question', models.TextField()),
                ('created', models.DateTimeField(help_text=b'Date and time of bid created.', auto_now_add=True)),
                ('website', models.CharField(max_length=150, blank=True)),
                ('ipaddress', models.GenericIPAddressField(null=True, blank=True)),
                ('actor', models.ForeignKey(blank=True, to='actors.Actor', null=True)),
                ('lead', models.ForeignKey(to='leads.Lead')),
            ],
        ),
        migrations.CreateModel(
            name='LeadCategory',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=128)),
                ('category_number', models.CharField(default=leads.models.create_actor_number, help_text=b'automatically create category no used for api reference', max_length=128)),
                ('parent', models.ForeignKey(blank=True, to='leads.LeadCategory', null=True)),
            ],
            options={
                'verbose_name_plural': 'Lead categories',
            },
        ),
        migrations.CreateModel(
            name='LeadKeyword',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=128)),
            ],
        ),
        migrations.CreateModel(
            name='LeadRequest',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('title', models.CharField(default=b'', help_text=b'Short title of the request', max_length=256, blank=True)),
                ('description', models.TextField(default=b'', help_text=b'Detailed description of the request', blank=True)),
                ('read_more_link', models.URLField(default=b'', help_text=b'A read more reference link (URL)', blank=True)),
                ('deal_starts', models.DateTimeField(help_text=b'Date from when the consumer wants to buy product or service', null=True, blank=True)),
                ('deal_ends', models.DateTimeField(help_text=b'Date until when the consumer wants to buy product or service', null=True, blank=True)),
                ('budget_min', models.DecimalField(default=0.0, help_text=b'Minimum estimated total value of budget for the product/service', max_digits=10, decimal_places=2, blank=True)),
                ('budget_max', models.DecimalField(default=0.0, help_text=b'Maximum estimated total value of budget for the product/service', max_digits=10, decimal_places=2, blank=True)),
                ('budget_currency', models.CharField(default=b'INR', help_text=b'Min/Max budget currency. Stored as ISO codes (SEK, EUR, etc) in the DB', max_length=8, blank=True)),
                ('price_min', models.DecimalField(default=0.0, help_text=b'Minimum price of requested leads', max_digits=10, decimal_places=2, blank=True)),
                ('price_max', models.DecimalField(default=0.0, help_text=b'Maximum price of requested leads', max_digits=10, decimal_places=2, blank=True)),
                ('price_currency', models.CharField(default=b'INR', help_text=b'Min/Max lead price currency. Stored as ISO codes (SEK, EUR, etc) in the DB', max_length=8, blank=True)),
                ('rank_min', models.FloatField(default=0.0, help_text=b'Minimum rank of requested leads', blank=True)),
                ('rank_max', models.FloatField(default=0.0, help_text=b'Maximum rank of requested leads', blank=True)),
                ('leads_needed', models.CharField(default=b'', help_text=b'Tells how many leads are requested from buyer', max_length=16, blank=True)),
                ('leads_needed_unit', models.CharField(default=b'', help_text=b'Tells what period the lead requested (eg. 100 leads per day). Values> day, week, month, year', max_length=10, blank=True, choices=[(b'', b'None'), (b'days', b'Days'), (b'week', b'Week'), (b'month', b'Month'), (b'year', b'Year')])),
                ('viewed', models.PositiveIntegerField(default=0, help_text=b'Tells how many times the request have been viewed', blank=True)),
                ('shared', models.PositiveIntegerField(default=0, help_text=b'Tells how many times the request have been shared', blank=True)),
                ('active', models.BooleanField(default=True, help_text=b'Request status, handle by system')),
                ('status', models.CharField(default=b'active', help_text=b'Request status, handle by seller', max_length=10, choices=[(b'active', 'Active'), (b'inactive', 'Inactive'), (b'test', 'Test')])),
                ('location', models.CharField(default=b'', help_text=b'Specifies in what location this is requested', max_length=128, blank=True)),
                ('language', models.CharField(default=b'', help_text=b'Language of this request. Stored as ISO codes (Sv, En, etc) in the DB', max_length=8, blank=True, choices=[(b'', b' '), (b'en', 'English'), (b'en-UK', 'English - United Kingdom'), (b'sv', 'Swedish'), (b'da', 'Danish'), (b'fi', 'Finish'), (b'fr', 'French'), (b'de', 'German'), (b'it', 'Italian'), (b'nn', 'Norwegian'), (b'pl', 'Polish'), (b'pt', 'Portuguese'), (b'ru', 'Russian'), (b'se', 'Spanish')])),
                ('timezone', models.CharField(default=b'UTC+01:00', help_text=b'Timezone of this request. UTC TimeZone (http://en.wikipedia.org/wiki/Time_zone), eg UTC+01:00 for London', max_length=10, blank=True)),
                ('generation_method', models.CharField(default=b'', help_text=b'Specified the method used to generate the request', max_length=128, blank=True)),
                ('created', models.DateTimeField(help_text=b'Auto generated by system.', auto_now_add=True)),
                ('modified', models.DateTimeField(help_text=b'Auto generated by system.', auto_now_add=True)),
                ('buyer', models.ForeignKey(to='actors.Actor')),
                ('category', models.ForeignKey(blank=True, to='leads.LeadCategory', help_text=b'One major category per lead', null=True)),
                ('keywords', models.ManyToManyField(help_text=b'Multiple keywords related to the lead', to='leads.LeadKeyword', blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='LeadRequestedLanguage',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(default=b'', help_text=b'Stored as ISO codes (Sv, En, etc) in the DB', max_length=8, blank=True, choices=[(b'', b' '), (b'en', 'English'), (b'en-UK', 'English - United Kingdom'), (b'sv', 'Swedish'), (b'da', 'Danish'), (b'fi', 'Finish'), (b'fr', 'French'), (b'de', 'German'), (b'it', 'Italian'), (b'nn', 'Norwegian'), (b'pl', 'Polish'), (b'pt', 'Portuguese'), (b'ru', 'Russian'), (b'se', 'Spanish')])),
            ],
        ),
        migrations.CreateModel(
            name='LeadStatistics',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('viewed', models.PositiveIntegerField(default=0, help_text=b'Tells how many times the lead have been viewed', blank=True)),
                ('shared', models.PositiveIntegerField(default=0, help_text=b'Tells how many times the lead have been shared', blank=True)),
                ('modified', models.DateTimeField(help_text=b'Auto generated by system.', auto_now_add=True)),
                ('lead', models.OneToOneField(to='leads.Lead')),
            ],
            options={
                'verbose_name_plural': 'Lead statistics',
            },
        ),
        migrations.CreateModel(
            name='LeadVerification',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('source', models.CharField(default=b'', help_text=b'Source used to verify.', max_length=128, blank=True)),
                ('field', models.CharField(default=b'', help_text=b'Field verified.', max_length=128, blank=True, choices=[(b'company', 'Company'), (b'contact', 'Contact'), (b'email', 'Email'), (b'phone', 'Phone'), (b'street', 'Street')])),
                ('status', models.CharField(default=b'', help_text=b'Verified status.', max_length=10, blank=True, choices=[(b'ok', 'OK'), (b'not_ok', 'Not OK'), (b'missing', 'Missing'), (b'error', 'Error')])),
                ('verified_date', models.DateField(help_text=b'Verified date.', null=True, blank=True)),
                ('created', models.DateField(help_text=b'Auto generated by system.', auto_now_add=True)),
                ('modified', models.DateField(help_text=b'Auto generated by system.', auto_now_add=True)),
                ('lead', models.ForeignKey(to='leads.Lead')),
            ],
            options={
                'verbose_name': 'Lookup verification',
                'verbose_name_plural': 'Lookups verification',
            },
        ),
        migrations.AddField(
            model_name='leadrequest',
            name='requested_language',
            field=models.ManyToManyField(help_text=b'Requested language. Stored as ISO codes (Sv, En, etc) in the DB', to='leads.LeadRequestedLanguage', blank=True),
        ),
        migrations.AddField(
            model_name='lead',
            name='category',
            field=models.ForeignKey(blank=True, to='leads.LeadCategory', help_text=b'Category of leads', null=True),
        ),
        migrations.AddField(
            model_name='lead',
            name='consumer',
            field=models.ForeignKey(blank=True, to='leads.Consumer', help_text=b'Consumer information for lead', null=True),
        ),
        migrations.AddField(
            model_name='lead',
            name='keywords',
            field=models.ManyToManyField(help_text=b'', to='leads.LeadKeyword', blank=True),
        ),
        migrations.AddField(
            model_name='lead',
            name='seller',
            field=models.ForeignKey(to='actors.Actor'),
        ),
        migrations.AddField(
            model_name='consumer',
            name='address',
            field=models.OneToOneField(null=True, blank=True, to='leads.ConsumerAddress', help_text=b'Address of consumer.'),
        ),
        migrations.AddField(
            model_name='consumer',
            name='company',
            field=models.OneToOneField(null=True, blank=True, to='leads.ConsumerCompany', help_text=b'Company  of consumer.'),
        ),
        migrations.AlterUniqueTogether(
            name='leadverification',
            unique_together=set([('lead', 'field')]),
        ),
    ]
